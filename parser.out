Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NAME EQUALS expression
Rule 2     statement -> expression
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression TIMES expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     expression -> FRAC expression MIDDLE expression END
Rule 8     expression -> MINUS expression
Rule 9     expression -> LPAREN expression RPAREN
Rule 10    expression -> NUMBER
Rule 11    expression -> NAME

Terminals, with rules where they appear

DIVIDE               : 6
END                  : 7
EQUALS               : 1
FRAC                 : 7
LPAREN               : 9
MIDDLE               : 7
MINUS                : 4 8
NAME                 : 1 11
NUMBER               : 10
PLUS                 : 3
RPAREN               : 9
TIMES                : 5
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7 7 8 9
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NAME EQUALS expression
    (2) statement -> . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    NAME            shift and go to state 2
    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3

    expression                     shift and go to state 6
    statement                      shift and go to state 4

state 1

    (7) expression -> FRAC . expression MIDDLE expression END
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 9

state 2

    (1) statement -> NAME . EQUALS expression
    (11) expression -> NAME .

    EQUALS          shift and go to state 10
    PLUS            reduce using rule 11 (expression -> NAME .)
    MINUS           reduce using rule 11 (expression -> NAME .)
    TIMES           reduce using rule 11 (expression -> NAME .)
    DIVIDE          reduce using rule 11 (expression -> NAME .)
    $end            reduce using rule 11 (expression -> NAME .)


state 3

    (10) expression -> NUMBER .

    END             reduce using rule 10 (expression -> NUMBER .)
    PLUS            reduce using rule 10 (expression -> NUMBER .)
    MINUS           reduce using rule 10 (expression -> NUMBER .)
    TIMES           reduce using rule 10 (expression -> NUMBER .)
    DIVIDE          reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    MIDDLE          reduce using rule 10 (expression -> NUMBER .)
    RPAREN          reduce using rule 10 (expression -> NUMBER .)


state 4

    (0) S' -> statement .



state 5

    (9) expression -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 11

state 6

    (2) statement -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 2 (statement -> expression .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 13


state 7

    (8) expression -> MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 16

state 8

    (11) expression -> NAME .

    END             reduce using rule 11 (expression -> NAME .)
    PLUS            reduce using rule 11 (expression -> NAME .)
    MINUS           reduce using rule 11 (expression -> NAME .)
    TIMES           reduce using rule 11 (expression -> NAME .)
    DIVIDE          reduce using rule 11 (expression -> NAME .)
    $end            reduce using rule 11 (expression -> NAME .)
    MIDDLE          reduce using rule 11 (expression -> NAME .)
    RPAREN          reduce using rule 11 (expression -> NAME .)


state 9

    (7) expression -> FRAC expression . MIDDLE expression END
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    MIDDLE          shift and go to state 17
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 13


state 10

    (1) statement -> NAME EQUALS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 18

state 11

    (9) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 19
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 13


state 12

    (3) expression -> expression PLUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 20

state 13

    (6) expression -> expression DIVIDE . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 21

state 14

    (4) expression -> expression MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 22

state 15

    (5) expression -> expression TIMES . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 23

state 16

    (8) expression -> MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    END             reduce using rule 8 (expression -> MINUS expression .)
    PLUS            reduce using rule 8 (expression -> MINUS expression .)
    MINUS           reduce using rule 8 (expression -> MINUS expression .)
    TIMES           reduce using rule 8 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 8 (expression -> MINUS expression .)
    $end            reduce using rule 8 (expression -> MINUS expression .)
    MIDDLE          reduce using rule 8 (expression -> MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 14 ]
  ! TIMES           [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 17

    (7) expression -> FRAC expression MIDDLE . expression END
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . FRAC expression MIDDLE expression END
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    FRAC            shift and go to state 1
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 24

state 18

    (1) statement -> NAME EQUALS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 13


state 19

    (9) expression -> LPAREN expression RPAREN .

    END             reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MIDDLE          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)


state 20

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    END             reduce using rule 3 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 3 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 3 (expression -> expression PLUS expression .)
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    MIDDLE          reduce using rule 3 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 13

  ! TIMES           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 14 ]


state 21

    (6) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    END             reduce using rule 6 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 6 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 6 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 6 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 6 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    MIDDLE          reduce using rule 6 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 6 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 14 ]
  ! TIMES           [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 22

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    END             reduce using rule 4 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 4 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 4 (expression -> expression MINUS expression .)
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    MIDDLE          reduce using rule 4 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 13

  ! TIMES           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 14 ]


state 23

    (5) expression -> expression TIMES expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    END             reduce using rule 5 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 5 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 5 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 5 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 5 (expression -> expression TIMES expression .)
    $end            reduce using rule 5 (expression -> expression TIMES expression .)
    MIDDLE          reduce using rule 5 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 5 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 14 ]
  ! TIMES           [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 24

    (7) expression -> FRAC expression MIDDLE expression . END
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    END             shift and go to state 25
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 13


state 25

    (7) expression -> FRAC expression MIDDLE expression END .

    END             reduce using rule 7 (expression -> FRAC expression MIDDLE expression END .)
    PLUS            reduce using rule 7 (expression -> FRAC expression MIDDLE expression END .)
    MINUS           reduce using rule 7 (expression -> FRAC expression MIDDLE expression END .)
    TIMES           reduce using rule 7 (expression -> FRAC expression MIDDLE expression END .)
    DIVIDE          reduce using rule 7 (expression -> FRAC expression MIDDLE expression END .)
    $end            reduce using rule 7 (expression -> FRAC expression MIDDLE expression END .)
    MIDDLE          reduce using rule 7 (expression -> FRAC expression MIDDLE expression END .)
    RPAREN          reduce using rule 7 (expression -> FRAC expression MIDDLE expression END .)

